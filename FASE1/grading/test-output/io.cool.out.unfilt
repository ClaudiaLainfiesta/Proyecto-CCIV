#name "./io.cool"
#1 '('
#1 '*'
#1 '*'
#1 TYPEID The
#1 TYPEID IO
#1 CLASS
#1 OBJECTID is
#1 OBJECTID predefined
#1 OBJECTID and
#1 OBJECTID has
#1 INT_CONST 4
#1 OBJECTID methods
#1 ':'
#1 '*'
#1 '*'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID string
#1 '('
#1 OBJECTID s
#1 ':'
#1 TYPEID String
#1 ')'
#1 ':'
#1 TYPEID SELF
LEXER BUG - UNMATCHED: _
#1 TYPEID TYPE
#1 '*'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID int
#1 '('
#1 OBJECTID i
#1 ':'
#1 TYPEID Int
#1 ')'
#1 ':'
#1 TYPEID SELF
LEXER BUG - UNMATCHED: _
#1 TYPEID TYPE
#1 '*'
#1 IN
LEXER BUG - UNMATCHED: _
#1 OBJECTID string
#1 '('
#1 ')'
#1 ':'
#1 TYPEID String
#1 '*'
#1 IN
LEXER BUG - UNMATCHED: _
#1 OBJECTID int
#1 '('
#1 ')'
#1 ':'
#1 TYPEID Int
#1 '*'
#1 '*'
#1 TYPEID The
#1 OBJECTID out
#1 OBJECTID operations
#1 OBJECTID print
#1 OBJECTID their
#1 OBJECTID argument
#1 OBJECTID to
#1 OBJECTID the
#1 OBJECTID terminal
#1 '.'
#1 TYPEID The
#1 '*'
#1 IN
LEXER BUG - UNMATCHED: _
#1 OBJECTID string
#1 OBJECTID method
#1 OBJECTID reads
#1 OBJECTID an
#1 OBJECTID entire
#1 OBJECTID line
#1 OBJECTID from
#1 OBJECTID the
#1 OBJECTID terminal
#1 OBJECTID and
#1 OBJECTID returns
#1 OBJECTID a
#1 '*'
#1 OBJECTID string
#1 NOT
#1 OBJECTID containing
#1 OBJECTID the
#1 OBJECTID new
#1 OBJECTID line
#1 '.'
#1 TYPEID The
#1 IN
LEXER BUG - UNMATCHED: _
#1 OBJECTID int
#1 OBJECTID method
#1 OBJECTID also
#1 OBJECTID reads
#1 '*'
#1 OBJECTID an
#1 OBJECTID entire
#1 OBJECTID line
#1 OBJECTID from
#1 OBJECTID the
#1 OBJECTID terminal
#1 OBJECTID and
#1 OBJECTID returns
#1 OBJECTID the
#1 OBJECTID integer
#1 '*'
#1 OBJECTID corresponding
#1 OBJECTID to
#1 OBJECTID the
#1 OBJECTID first
#1 OBJECTID non
#1 OBJECTID blank
#1 OBJECTID word
#1 OBJECTID on
#1 OBJECTID the
#1 OBJECTID line
#1 '.'
#1 IF
#1 OBJECTID that
#1 '*'
#1 OBJECTID word
#1 OBJECTID is
#1 NOT
#1 OBJECTID an
#1 OBJECTID integer
#1 ','
#1 OBJECTID it
#1 OBJECTID returns
#1 INT_CONST 0
#1 '.'
#1 '*'
#1 '*'
#1 '*'
#1 TYPEID Because
#1 OBJECTID our
#1 OBJECTID language
#1 OBJECTID is
#1 OBJECTID object
#1 OBJECTID oriented
#1 ','
#1 OBJECTID we
#1 OBJECTID need
#1 OBJECTID an
#1 OBJECTID object
#1 OF
#1 OBJECTID type
#1 '*'
#1 TYPEID IO
#1 IN
#1 OBJECTID order
#1 OBJECTID to
#1 OBJECTID call
#1 OBJECTID any
#1 OF
#1 OBJECTID these
#1 OBJECTID methods
#1 '.'
#1 '*'
#1 '*'
#1 TYPEID There
#1 OBJECTID are
#1 OBJECTID basically
#1 OBJECTID two
#1 OBJECTID ways
#1 OF
#1 OBJECTID getting
#1 OBJECTID access
#1 OBJECTID to
#1 TYPEID IO
#1 IN
#1 OBJECTID a
#1 CLASS
#1 TYPEID C
#1 '.'
#1 '*'
#1 '*'
#1 INT_CONST 1
#1 ')'
#1 TYPEID Define
#1 TYPEID C
#1 OBJECTID to
#1 TYPEID Inherit
#1 OBJECTID from
#1 TYPEID IO
#1 '.'
#1 TYPEID This
#1 OBJECTID way
#1 OBJECTID the
#1 TYPEID IO
#1 OBJECTID methods
#1 OBJECTID become
#1 '*'
#1 OBJECTID methods
#1 OF
#1 TYPEID C
#1 ','
#1 OBJECTID and
#1 OBJECTID they
#1 OBJECTID can
#1 OBJECTID be
#1 OBJECTID called
#1 OBJECTID using
#1 OBJECTID the
#1 OBJECTID abbreviated
#1 '*'
#1 OBJECTID dispatch
#1 ','
#1 OBJECTID i
#1 '.'
#1 OBJECTID e
#1 '.'
#1 '*'
#1 '*'
#1 CLASS
#1 TYPEID C
#1 INHERITS
#1 TYPEID IO
#1 OBJECTID is
#1 '*'
#1 '.'
#1 '.'
#1 '.'
#1 '*'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID string
#1 '('
#1 STR_CONST "Hello world\\n"
#1 ')'
#1 '*'
#1 '.'
#1 '.'
#1 '.'
#1 '*'
#1 OBJECTID end
#1 ';'
#1 '*'
#1 '*'
#1 INT_CONST 2
#1 ')'
#1 IF
#1 OBJECTID your
#1 CLASS
#1 TYPEID C
#1 OBJECTID does
#1 NOT
#1 OBJECTID directly
#1 OBJECTID or
#1 OBJECTID indirectly
#1 OBJECTID inherit
#1 OBJECTID from
#1 '*'
#1 TYPEID IO
#1 ','
#1 OBJECTID the
#1 OBJECTID best
#1 OBJECTID way
#1 OBJECTID to
#1 OBJECTID access
#1 TYPEID IO
#1 OBJECTID is
#1 OBJECTID through
#1 OBJECTID an
#1 OBJECTID initialized
#1 '*'
#1 OBJECTID attribute
#1 OF
#1 OBJECTID type
#1 TYPEID IO
#1 '.'
#1 '*'
#1 '*'
#1 CLASS
#1 TYPEID C
#1 INHERITS
#1 TYPEID Foo
#1 OBJECTID is
#1 '*'
#1 OBJECTID io
#1 ':'
#1 TYPEID IO
#1 ASSIGN
#1 OBJECTID new
#1 TYPEID IO
#1 ';'
#1 '*'
#1 '.'
#1 '.'
#1 '.'
#1 '*'
#1 OBJECTID io
#1 '.'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID string
#1 '('
#1 STR_CONST "Hello world\\n"
#1 ')'
#1 ';'
#1 '*'
#1 '.'
#1 '.'
#1 '.'
#1 '*'
#1 OBJECTID end
#1 ';'
#1 '*'
#1 '*'
#1 TYPEID Approach
#1 INT_CONST 1
#1 ')'
#1 OBJECTID is
#1 OBJECTID most
#1 OBJECTID often
#1 OBJECTID used
#1 ','
#1 IN
#1 OBJECTID particular
#1 OBJECTID when
#1 OBJECTID you
#1 OBJECTID need
#1 TYPEID IO
#1 '*'
#1 OBJECTID functions
#1 IN
#1 OBJECTID the
#1 TYPEID Main
#1 CLASS
#1 '.'
#1 '*'
#1 '*'
#1 ')'
#1 CLASS
#1 TYPEID A
#1 '{'
#1 '-'
#1 '-'
#1 TYPEID Let
LEXER BUG - UNMATCHED: '
#1 OBJECTID s
#1 OBJECTID assume
#1 OBJECTID that
#1 OBJECTID we
#1 OBJECTID don
LEXER BUG - UNMATCHED: '
#1 OBJECTID t
#1 OBJECTID want
#1 TYPEID A
#1 OBJECTID to
#1 NOT
#1 OBJECTID inherit
#1 OBJECTID from
#1 TYPEID IO
#1 '.'
#1 OBJECTID io
#1 ':'
#1 TYPEID IO
#1 ASSIGN
#1 OBJECTID new
#1 TYPEID IO
#1 ';'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID a
#1 '('
#1 ')'
#1 ':'
#1 TYPEID Object
#1 '{'
#1 OBJECTID io
#1 '.'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID string
#1 '('
#1 STR_CONST "A: Hello world\\n"
#1 ')'
#1 '}'
#1 ';'
#1 '}'
#1 ';'
#1 CLASS
#1 TYPEID B
#1 INHERITS
#1 TYPEID A
#1 '{'
#1 '-'
#1 '-'
#1 TYPEID B
#1 OBJECTID does
#1 NOT
#1 OBJECTID have
#1 OBJECTID to
#1 OBJECTID an
#1 OBJECTID extra
#1 OBJECTID attribute
#1 ','
#1 OBJECTID since
#1 OBJECTID it
#1 INHERITS
#1 OBJECTID io
#1 OBJECTID from
#1 TYPEID A
#1 '.'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID b
#1 '('
#1 ')'
#1 ':'
#1 TYPEID Object
#1 '{'
#1 OBJECTID io
#1 '.'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID string
#1 '('
#1 STR_CONST "B: Hello world\\n"
#1 ')'
#1 '}'
#1 ';'
#1 '}'
#1 ';'
#1 CLASS
#1 TYPEID C
#1 INHERITS
#1 TYPEID IO
#1 '{'
#1 '-'
#1 '-'
#1 TYPEID Now
#1 OBJECTID the
#1 TYPEID IO
#1 OBJECTID methods
#1 OBJECTID are
#1 OBJECTID part
#1 OF
#1 TYPEID C
#1 '.'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID c
#1 '('
#1 ')'
#1 ':'
#1 TYPEID Object
#1 '{'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID string
#1 '('
#1 STR_CONST "C: Hello world\\n"
#1 ')'
#1 '}'
#1 ';'
#1 '-'
#1 '-'
#1 TYPEID Note
#1 OBJECTID that
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID string
#1 '('
#1 '.'
#1 '.'
#1 '.'
#1 ')'
#1 OBJECTID is
#1 OBJECTID just
#1 OBJECTID a
#1 OBJECTID shorthand
#1 OBJECTID for
#1 OBJECTID self
#1 '.'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID string
#1 '('
#1 '.'
#1 '.'
#1 '.'
#1 ')'
#1 '}'
#1 ';'
#1 CLASS
#1 TYPEID D
#1 INHERITS
#1 TYPEID C
#1 '{'
#1 '-'
#1 '-'
#1 INHERITS
#1 TYPEID IO
#1 OBJECTID methods
#1 OBJECTID from
#1 TYPEID C
#1 '.'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID d
#1 '('
#1 ')'
#1 ':'
#1 TYPEID Object
#1 '{'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID string
#1 '('
#1 STR_CONST "D: Hello world\\n"
#1 ')'
#1 '}'
#1 ';'
#1 '}'
#1 ';'
#1 CLASS
#1 TYPEID Main
#1 INHERITS
#1 TYPEID IO
#1 '{'
#1 '-'
#1 '-'
#1 TYPEID Same
#1 CASE
#1 OBJECTID as
#1 CLASS
#1 TYPEID C
#1 '.'
#1 OBJECTID main
#1 '('
#1 ')'
#1 ':'
#1 TYPEID Object
#1 '{'
#1 '{'
#1 '('
#1 OBJECTID new
#1 TYPEID A
#1 ')'
#1 '.'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID a
#1 '('
#1 ')'
#1 ';'
#1 '('
#1 OBJECTID new
#1 TYPEID B
#1 ')'
#1 '.'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID b
#1 '('
#1 ')'
#1 ';'
#1 '('
#1 OBJECTID new
#1 TYPEID C
#1 ')'
#1 '.'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID c
#1 '('
#1 ')'
#1 ';'
#1 '('
#1 OBJECTID new
#1 TYPEID D
#1 ')'
#1 '.'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID d
#1 '('
#1 ')'
#1 ';'
#1 OBJECTID out
LEXER BUG - UNMATCHED: _
#1 OBJECTID string
#1 '('
#1 STR_CONST "Done.\\n"
#1 ')'
#1 ';'
#1 '}'
#1 '}'
#1 ';'
#1 '}'
#1 ';'
