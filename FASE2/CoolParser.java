
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Sep 01 04:37:55 UTC 2025
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Mon Sep 01 04:37:55 UTC 2025
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\005\010\000\002\005\012" +
    "\000\002\005\010\000\002\005\012\000\002\006\002\000" +
    "\002\007\003\000\002\007\004\000\002\010\006\000\002" +
    "\010\014\000\002\010\014\000\002\010\010\000\002\011" +
    "\002\000\002\012\003\000\002\012\005\000\002\013\005" +
    "\000\002\014\007\000\002\014\011\000\002\014\007\000" +
    "\002\014\004\000\002\014\004\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\004\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\004\000\002\014\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\016\003\000\002\016\004\000\002\017\010\000\002\015" +
    "\004\000\002\015\007\000\002\015\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\004\007\001\002\000\006\002\001\004" +
    "\007\001\002\000\004\002\165\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\004\055\010\001\002\000\006\011" +
    "\012\050\011\001\002\000\006\051\ufff9\056\017\001\002" +
    "\000\004\055\013\001\002\000\004\050\014\001\002\000" +
    "\006\051\ufff9\056\017\001\002\000\006\051\ufff8\056\ufff8" +
    "\001\002\000\006\051\155\056\017\001\002\000\006\044" +
    "\023\045\024\001\002\000\004\051\021\001\002\000\004" +
    "\043\022\001\002\000\006\002\ufffc\004\ufffc\001\002\000" +
    "\004\055\147\001\002\000\006\046\ufff2\056\026\001\002" +
    "\000\006\042\136\046\137\001\002\000\004\044\134\001" +
    "\002\000\006\042\ufff1\046\ufff1\001\002\000\004\046\031" +
    "\001\002\000\004\044\032\001\002\000\004\055\033\001" +
    "\002\000\004\050\034\001\002\000\030\012\047\020\043" +
    "\024\035\025\041\027\044\041\046\045\050\052\037\053" +
    "\036\054\040\056\042\001\002\000\004\055\133\001\002" +
    "\000\034\010\uffde\022\uffde\030\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\042\uffde\043\uffde\046\uffde" +
    "\051\uffde\001\002\000\034\010\uffdd\022\uffdd\030\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\042\uffdd" +
    "\043\uffdd\046\uffdd\051\uffdd\001\002\000\034\010\uffdc\022" +
    "\uffdc\030\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\042\uffdc\043\uffdc\046\uffdc\051\uffdc\001\002\000" +
    "\030\012\047\020\043\024\035\025\041\027\044\041\046" +
    "\045\050\052\037\053\036\054\040\056\042\001\002\000" +
    "\034\010\uffdf\022\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\042\uffdf\043\uffdf\046\uffdf\051" +
    "\uffdf\001\002\000\030\012\047\020\043\024\035\025\041" +
    "\027\044\041\046\045\050\052\037\053\036\054\040\056" +
    "\042\001\002\000\030\012\047\020\043\024\035\025\041" +
    "\027\044\041\046\045\050\052\037\053\036\054\040\056" +
    "\042\001\002\000\022\030\057\032\056\033\061\034\060" +
    "\035\055\036\052\037\053\051\113\001\002\000\030\012" +
    "\047\020\043\024\035\025\041\027\044\041\046\045\050" +
    "\052\037\053\036\054\040\056\042\001\002\000\004\056" +
    "\071\001\002\000\030\012\047\020\043\024\035\025\041" +
    "\027\044\041\046\045\050\052\037\053\036\054\040\056" +
    "\042\001\002\000\022\030\057\032\056\033\061\034\060" +
    "\035\055\036\052\037\053\046\054\001\002\000\030\012" +
    "\047\020\043\024\035\025\041\027\044\041\046\045\050" +
    "\052\037\053\036\054\040\056\042\001\002\000\030\012" +
    "\047\020\043\024\035\025\041\027\044\041\046\045\050" +
    "\052\037\053\036\054\040\056\042\001\002\000\034\010" +
    "\uffe0\022\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\042\uffe0\043\uffe0\046\uffe0\051\uffe0\001" +
    "\002\000\030\012\047\020\043\024\035\025\041\027\044" +
    "\041\046\045\050\052\037\053\036\054\040\056\042\001" +
    "\002\000\030\012\047\020\043\024\035\025\041\027\044" +
    "\041\046\045\050\052\037\053\036\054\040\056\042\001" +
    "\002\000\030\012\047\020\043\024\035\025\041\027\044" +
    "\041\046\045\050\052\037\053\036\054\040\056\042\001" +
    "\002\000\030\012\047\020\043\024\035\025\041\027\044" +
    "\041\046\045\050\052\037\053\036\054\040\056\042\001" +
    "\002\000\030\012\047\020\043\024\035\025\041\027\044" +
    "\041\046\045\050\052\037\053\036\054\040\056\042\001" +
    "\002\000\034\010\uffe6\022\uffe6\030\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\042\uffe6\043\uffe6\046" +
    "\uffe6\051\uffe6\001\002\000\034\010\uffe8\022\uffe8\030\uffe8" +
    "\032\uffe8\033\061\034\uffe8\035\055\036\uffe8\037\uffe8\042" +
    "\uffe8\043\uffe8\046\uffe8\051\uffe8\001\002\000\026\010\uffe3" +
    "\022\uffe3\032\056\033\061\034\060\035\055\042\uffe3\043" +
    "\uffe3\046\uffe3\051\uffe3\001\002\000\034\010\uffe9\022\uffe9" +
    "\030\uffe9\032\uffe9\033\061\034\uffe9\035\055\036\uffe9\037" +
    "\uffe9\042\uffe9\043\uffe9\046\uffe9\051\uffe9\001\002\000\034" +
    "\010\uffe7\022\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\042\uffe7\043\uffe7\046\uffe7\051\uffe7" +
    "\001\002\000\026\010\uffe4\022\uffe4\032\056\033\061\034" +
    "\060\035\055\042\uffe4\043\uffe4\046\uffe4\051\uffe4\001\002" +
    "\000\026\010\uffe2\022\uffe2\032\056\033\061\034\060\035" +
    "\055\042\uffe2\043\uffe2\046\uffe2\051\uffe2\001\002\000\004" +
    "\044\072\001\002\000\004\055\073\001\002\000\010\010" +
    "\075\026\077\042\074\001\002\000\004\056\103\001\002" +
    "\000\030\012\047\020\043\024\035\025\041\027\044\041" +
    "\046\045\050\052\037\053\036\054\040\056\042\001\002" +
    "\000\034\010\uffee\022\uffee\030\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\042\uffee\043\uffee\046\uffee" +
    "\051\uffee\001\002\000\030\012\047\020\043\024\035\025" +
    "\041\027\044\041\046\045\050\052\037\053\036\054\040" +
    "\056\042\001\002\000\024\010\075\030\057\032\056\033" +
    "\061\034\060\035\055\036\052\037\053\042\074\001\002" +
    "\000\034\010\uffed\022\uffed\030\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\042\uffed\043\uffed\046\uffed" +
    "\051\uffed\001\002\000\034\010\uffd8\022\uffd8\030\057\032" +
    "\056\033\061\034\060\035\055\036\052\037\053\042\uffd8" +
    "\043\uffd8\046\uffd8\051\uffd8\001\002\000\004\044\104\001" +
    "\002\000\004\055\105\001\002\000\010\010\075\026\107" +
    "\042\074\001\002\000\034\010\uffd7\022\uffd7\030\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\042\uffd7" +
    "\043\uffd7\046\uffd7\051\uffd7\001\002\000\030\012\047\020" +
    "\043\024\035\025\041\027\044\041\046\045\050\052\037" +
    "\053\036\054\040\056\042\001\002\000\024\010\075\030" +
    "\057\032\056\033\061\034\060\035\055\036\052\037\053" +
    "\042\074\001\002\000\034\010\uffd6\022\uffd6\030\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\042\uffd6" +
    "\043\uffd6\046\uffd6\051\uffd6\001\002\000\034\010\uffe5\022" +
    "\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\042\uffe5\043\uffe5\046\uffe5\051\uffe5\001\002\000" +
    "\004\043\114\001\002\000\006\051\ufff5\056\ufff5\001\002" +
    "\000\034\010\uffe1\022\uffe1\030\057\032\056\033\061\034" +
    "\060\035\055\036\052\037\053\042\uffe1\043\uffe1\046\uffe1" +
    "\051\uffe1\001\002\000\022\022\117\030\057\032\056\033" +
    "\061\034\060\035\055\036\052\037\053\001\002\000\004" +
    "\056\121\001\002\000\006\021\131\056\121\001\002\000" +
    "\004\044\123\001\002\000\006\021\uffdb\056\uffdb\001\002" +
    "\000\004\055\124\001\002\000\004\023\125\001\002\000" +
    "\030\012\047\020\043\024\035\025\041\027\044\041\046" +
    "\045\050\052\037\053\036\054\040\056\042\001\002\000" +
    "\022\030\057\032\056\033\061\034\060\035\055\036\052" +
    "\037\053\043\127\001\002\000\006\021\uffd9\056\uffd9\001" +
    "\002\000\006\021\uffda\056\uffda\001\002\000\034\010\uffec" +
    "\022\uffec\030\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\042\uffec\043\uffec\046\uffec\051\uffec\001\002" +
    "\000\034\010\uffea\022\uffea\030\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\042\uffea\043\uffea\046\uffea" +
    "\051\uffea\001\002\000\034\010\uffeb\022\uffeb\030\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\042\uffeb" +
    "\043\uffeb\046\uffeb\051\uffeb\001\002\000\004\055\135\001" +
    "\002\000\006\042\uffef\046\uffef\001\002\000\004\056\026" +
    "\001\002\000\004\044\140\001\002\000\004\055\141\001" +
    "\002\000\004\050\142\001\002\000\030\012\047\020\043" +
    "\024\035\025\041\027\044\041\046\045\050\052\037\053" +
    "\036\054\040\056\042\001\002\000\022\030\057\032\056" +
    "\033\061\034\060\035\055\036\052\037\053\051\144\001" +
    "\002\000\004\043\145\001\002\000\006\051\ufff4\056\ufff4" +
    "\001\002\000\006\042\ufff0\046\ufff0\001\002\000\006\026" +
    "\151\043\150\001\002\000\006\051\ufff6\056\ufff6\001\002" +
    "\000\030\012\047\020\043\024\035\025\041\027\044\041" +
    "\046\045\050\052\037\053\036\054\040\056\042\001\002" +
    "\000\022\030\057\032\056\033\061\034\060\035\055\036" +
    "\052\037\053\043\153\001\002\000\006\051\ufff3\056\ufff3" +
    "\001\002\000\006\051\ufff7\056\ufff7\001\002\000\004\043" +
    "\156\001\002\000\006\002\ufffa\004\ufffa\001\002\000\006" +
    "\051\163\056\017\001\002\000\004\051\161\001\002\000" +
    "\004\043\162\001\002\000\006\002\ufffd\004\ufffd\001\002" +
    "\000\004\043\164\001\002\000\006\002\ufffb\004\ufffb\001" +
    "\002\000\004\002\000\001\002\000\006\002\ufffe\004\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\010\003\004\004\003\005\005\001\001\000" +
    "\004\005\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\157\007" +
    "\156\010\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\017\007\015\010\014\001\001\000\002\001" +
    "\001\000\004\010\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\027\012\024\013\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\131" +
    "\001\001\000\002\001\001\000\004\014\115\001\001\000" +
    "\004\014\114\001\001\000\002\001\001\000\004\014\111" +
    "\001\001\000\002\001\001\000\004\014\050\001\001\000" +
    "\002\001\001\000\004\014\067\001\001\000\004\014\066" +
    "\001\001\000\002\001\001\000\004\014\065\001\001\000" +
    "\004\014\064\001\001\000\004\014\063\001\001\000\004" +
    "\014\062\001\001\000\004\014\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\075\001\001" +
    "\000\002\001\001\000\004\014\101\001\001\000\002\001" +
    "\001\000\004\014\077\001\001\000\004\015\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\105\001\001\000\002\001\001" +
    "\000\004\014\107\001\001\000\004\015\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\117\017\121\001\001\000\004\017\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nested_let ::= COMMA OBJECTID COLON TYPEID ASSIGN expr nested_let 
            {
              Expression RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression nl = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new let(curr_lineno(), oid, tid, e, nl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*nested_let*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nested_let ::= COMMA OBJECTID COLON TYPEID nested_let 
            {
              Expression RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression nl = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new let(curr_lineno(), oid, tid, new no_expr(curr_lineno()), nl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*nested_let*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // nested_let ::= IN expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = e; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*nested_let*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // branch ::= OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              Case RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new branch(curr_lineno(), oid, tid, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(13/*branch*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // case_branches_list ::= case_branches_list branch 
            {
              Cases RESULT = null;
		Cases bl = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = bl.appendElement(b); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*case_branches_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // case_branches_list ::= branch 
            {
              Cases RESULT = null;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Cases(curr_lineno())).appendElement(b); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*case_branches_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= BOOL_CONST 
            {
              Expression RESULT = null;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		RESULT = new bool_const(curr_lineno(), b); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= STR_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		RESULT = new string_const(curr_lineno(), s); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= INT_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new int_const(curr_lineno(), i); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= OBJECTID 
            {
              Expression RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new object(curr_lineno(), oid); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = e; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= NOT expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		RESULT = new comp(curr_lineno(), e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr EQ expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		RESULT = new eq(curr_lineno(), e1, e2);
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr LE expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		RESULT = new leq(curr_lineno(), e1, e2);
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr LT expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		RESULT = new lt(curr_lineno(), e1, e2);
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= NEG expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		RESULT = new neg(curr_lineno(), e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr DIV expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		RESULT = new divide(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr MULT expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		RESULT = new mul(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr MINUS expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		RESULT = new sub(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr PLUS expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		RESULT = new plus(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= ISVOID expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		RESULT = new isvoid(curr_lineno(), e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= NEW TYPEID 
            {
              Expression RESULT = null;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		RESULT = new new_(curr_lineno(), tid); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= CASE expr OF case_branches_list ESAC 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Cases bl = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new typcase(curr_lineno(), e, bl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= LET OBJECTID COLON TYPEID ASSIGN expr nested_let 
            {
              Expression RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression nl = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new let(curr_lineno(), oid, tid, e, nl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= LET OBJECTID COLON TYPEID nested_let 
            {
              Expression RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression nl = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new let(curr_lineno(), oid, tid, new no_expr(curr_lineno()), nl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formal ::= OBJECTID COLON TYPEID 
            {
              Formal RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new formalc(curr_lineno(), oid, tid); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*formal*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formal_list ::= formal_list COMMA formal 
            {
              Formals RESULT = null;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal_list ::= formal 
            {
              Formals RESULT = null;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dummy_formal_list ::= 
            {
              Formals RESULT = null;
		 RESULT = new Formals(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(7/*dummy_formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // feature ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              Feature RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), oid, tid, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // feature ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		RESULT = new method(curr_lineno(), oid, fl, tid, e ); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // feature ::= OBJECTID LPAREN dummy_formal_list RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		Formals fol = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		RESULT = new method(curr_lineno(), oid, fol, tid, e ); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // feature ::= OBJECTID COLON TYPEID SEMI 
            {
              Feature RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), oid, tid, new no_expr(curr_lineno())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature_list ::= feature_list feature 
            {
              Features RESULT = null;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // feature_list ::= feature 
            {
              Features RESULT = null;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Features(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dummy_feature_list ::= 
            {
              Features RESULT = null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*dummy_feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class ::= CLASS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT = null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(1/*program*/, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

