'('
'*'
'*'
TYPEID A
OBJECTID contribution
OBJECTID from
TYPEID Anne
TYPEID Sheets
'('
OBJECTID sheets
LEXER BUG - UNMATCHED: @
OBJECTID cory
')'
'*'
'*'
TYPEID Tests
OBJECTID the
OBJECTID arithmetic
OBJECTID operations
OBJECTID and
OBJECTID various
OBJECTID other
OBJECTID things
'*'
')'
CLASS
TYPEID A
'{'
OBJECTID var
':'
TYPEID Int
ASSIGN
INT_CONST 0
';'
OBJECTID value
'('
')'
':'
TYPEID Int
'{'
OBJECTID var
'}'
';'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID SELF
LEXER BUG - UNMATCHED: _
TYPEID TYPE
'{'
'{'
OBJECTID var
ASSIGN
OBJECTID num
';'
OBJECTID self
';'
'}'
'}'
';'
OBJECTID method1
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID SELF
LEXER BUG - UNMATCHED: _
TYPEID TYPE
'{'
'-'
'-'
OBJECTID same
OBJECTID self
'}'
';'
OBJECTID method2
'('
OBJECTID num1
':'
TYPEID Int
','
OBJECTID num2
':'
TYPEID Int
')'
':'
TYPEID B
'{'
'-'
'-'
OBJECTID plus
'('
OBJECTID let
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
OBJECTID num1
'+'
OBJECTID num2
';'
'('
OBJECTID new
TYPEID B
')'
'.'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
OBJECTID method3
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID C
'{'
'-'
'-'
OBJECTID negate
'('
OBJECTID let
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
'~'
OBJECTID num
';'
'('
OBJECTID new
TYPEID C
')'
'.'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
OBJECTID method4
'('
OBJECTID num1
':'
TYPEID Int
','
OBJECTID num2
':'
TYPEID Int
')'
':'
TYPEID D
'{'
'-'
'-'
OBJECTID diff
IF
OBJECTID num2
'<'
OBJECTID num1
OBJECTID then
'('
OBJECTID let
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
OBJECTID num1
'-'
OBJECTID num2
';'
'('
OBJECTID new
TYPEID D
')'
'.'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
OBJECTID x
')'
';'
'}'
')'
OBJECTID else
'('
OBJECTID let
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
OBJECTID num2
'-'
OBJECTID num1
';'
'('
OBJECTID new
TYPEID D
')'
'.'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
OBJECTID x
')'
';'
'}'
')'
FI
'}'
';'
OBJECTID method5
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID E
'{'
'-'
'-'
OBJECTID factorial
'('
OBJECTID let
OBJECTID x
':'
TYPEID Int
ASSIGN
INT_CONST 1
IN
'{'
'('
OBJECTID let
OBJECTID y
':'
TYPEID Int
ASSIGN
INT_CONST 1
IN
OBJECTID while
OBJECTID y
LE
OBJECTID num
LOOP
'{'
OBJECTID x
ASSIGN
OBJECTID x
'*'
OBJECTID y
';'
OBJECTID y
ASSIGN
OBJECTID y
'+'
INT_CONST 1
';'
'}'
POOL
')'
';'
'('
OBJECTID new
TYPEID E
')'
'.'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
'}'
';'
CLASS
TYPEID B
INHERITS
TYPEID A
'{'
'-'
'-'
TYPEID B
OBJECTID is
OBJECTID a
OBJECTID number
OBJECTID squared
OBJECTID method5
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID E
'{'
'-'
'-'
OBJECTID square
'('
OBJECTID let
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
OBJECTID num
'*'
OBJECTID num
';'
'('
OBJECTID new
TYPEID E
')'
'.'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
'}'
';'
CLASS
TYPEID C
INHERITS
TYPEID B
'{'
OBJECTID method6
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID A
'{'
'-'
'-'
OBJECTID negate
'('
OBJECTID let
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
'~'
OBJECTID num
';'
'('
OBJECTID new
TYPEID A
')'
'.'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
OBJECTID method5
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID E
'{'
'-'
'-'
OBJECTID cube
'('
OBJECTID let
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
OBJECTID num
'*'
OBJECTID num
'*'
OBJECTID num
';'
'('
OBJECTID new
TYPEID E
')'
'.'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
'}'
';'
CLASS
TYPEID D
INHERITS
TYPEID B
'{'
OBJECTID method7
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID Bool
'{'
'-'
'-'
OBJECTID divisible
OBJECTID by
INT_CONST 3
'('
OBJECTID let
OBJECTID x
':'
TYPEID Int
ASSIGN
OBJECTID num
IN
IF
OBJECTID x
'<'
INT_CONST 0
OBJECTID then
OBJECTID method7
'('
'~'
OBJECTID x
')'
OBJECTID else
IF
INT_CONST 0
'='
OBJECTID x
OBJECTID then
BOOL_CONST true
OBJECTID else
IF
INT_CONST 1
'='
OBJECTID x
OBJECTID then
BOOL_CONST false
OBJECTID else
IF
INT_CONST 2
'='
OBJECTID x
OBJECTID then
BOOL_CONST false
OBJECTID else
OBJECTID method7
'('
OBJECTID x
'-'
INT_CONST 3
')'
FI
FI
FI
FI
')'
'}'
';'
'}'
';'
CLASS
TYPEID E
INHERITS
TYPEID D
'{'
OBJECTID method6
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID A
'{'
'-'
'-'
OBJECTID division
'('
OBJECTID let
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
OBJECTID num
'/'
INT_CONST 8
';'
'('
OBJECTID new
TYPEID A
')'
'.'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
'}'
';'
'('
'*'
TYPEID The
OBJECTID following
OBJECTID code
OBJECTID is
OBJECTID from
OBJECTID atoi
'.'
OBJECTID cl
IN
'~'
OBJECTID cs164
'/'
OBJECTID examples
'*'
')'
'('
'*'
TYPEID The
CLASS
TYPEID A2I
OBJECTID provides
OBJECTID integer
'-'
OBJECTID to
'-'
OBJECTID string
OBJECTID and
OBJECTID string
'-'
OBJECTID to
'-'
OBJECTID integer
OBJECTID conversion
OBJECTID routines
'.'
TYPEID To
OBJECTID use
OBJECTID these
OBJECTID routines
','
OBJECTID either
OBJECTID inherit
OBJECTID them
IN
OBJECTID the
CLASS
OBJECTID where
OBJECTID needed
','
OBJECTID have
OBJECTID a
OBJECTID dummy
OBJECTID variable
OBJECTID bound
OBJECTID to
OBJECTID something
OF
OBJECTID type
TYPEID A2I
','
OBJECTID or
OBJECTID simpl
OBJECTID write
'('
OBJECTID new
TYPEID A2I
')'
'.'
OBJECTID method
'('
OBJECTID argument
')'
'.'
'*'
')'
'('
'*'
OBJECTID c2i
TYPEID Converts
OBJECTID a
INT_CONST 1
'-'
OBJECTID character
OBJECTID string
OBJECTID to
OBJECTID an
OBJECTID integer
'.'
TYPEID Aborts
IF
OBJECTID the
OBJECTID string
OBJECTID is
NOT
STR_CONST "0"
OBJECTID through
STR_CONST "9"
'*'
')'
CLASS
TYPEID A2I
'{'
OBJECTID c2i
'('
OBJECTID char
':'
TYPEID String
')'
':'
TYPEID Int
'{'
IF
OBJECTID char
'='
STR_CONST "0"
OBJECTID then
INT_CONST 0
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "1"
OBJECTID then
INT_CONST 1
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "2"
OBJECTID then
INT_CONST 2
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "3"
OBJECTID then
INT_CONST 3
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "4"
OBJECTID then
INT_CONST 4
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "5"
OBJECTID then
INT_CONST 5
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "6"
OBJECTID then
INT_CONST 6
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "7"
OBJECTID then
INT_CONST 7
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "8"
OBJECTID then
INT_CONST 8
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "9"
OBJECTID then
INT_CONST 9
OBJECTID else
'{'
OBJECTID abort
'('
')'
';'
INT_CONST 0
';'
'}'
'('
'*'
OBJECTID the
INT_CONST 0
OBJECTID is
OBJECTID needed
OBJECTID to
OBJECTID satisfy
OBJECTID the
OBJECTID typchecker
'*'
')'
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
'}'
';'
'('
'*'
OBJECTID i2c
OBJECTID is
OBJECTID the
OBJECTID inverse
OF
OBJECTID c2i
'.'
'*'
')'
OBJECTID i2c
'('
OBJECTID i
':'
TYPEID Int
')'
':'
TYPEID String
'{'
IF
OBJECTID i
'='
INT_CONST 0
OBJECTID then
STR_CONST "0"
OBJECTID else
IF
OBJECTID i
'='
INT_CONST 1
OBJECTID then
STR_CONST "1"
OBJECTID else
IF
OBJECTID i
'='
INT_CONST 2
OBJECTID then
STR_CONST "2"
OBJECTID else
IF
OBJECTID i
'='
INT_CONST 3
OBJECTID then
STR_CONST "3"
OBJECTID else
IF
OBJECTID i
'='
INT_CONST 4
OBJECTID then
STR_CONST "4"
OBJECTID else
IF
OBJECTID i
'='
INT_CONST 5
OBJECTID then
STR_CONST "5"
OBJECTID else
IF
OBJECTID i
'='
INT_CONST 6
OBJECTID then
STR_CONST "6"
OBJECTID else
IF
OBJECTID i
'='
INT_CONST 7
OBJECTID then
STR_CONST "7"
OBJECTID else
IF
OBJECTID i
'='
INT_CONST 8
OBJECTID then
STR_CONST "8"
OBJECTID else
IF
OBJECTID i
'='
INT_CONST 9
OBJECTID then
STR_CONST "9"
OBJECTID else
'{'
OBJECTID abort
'('
')'
';'
STR_CONST ""
';'
'}'
'-'
'-'
OBJECTID the
STR_CONST ""
OBJECTID is
OBJECTID needed
OBJECTID to
OBJECTID satisfy
OBJECTID the
OBJECTID typchecker
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
'}'
';'
'('
'*'
OBJECTID a2i
OBJECTID converts
OBJECTID an
TYPEID ASCII
OBJECTID string
OBJECTID into
OBJECTID an
OBJECTID integer
'.'
TYPEID The
OBJECTID empty
OBJECTID string
OBJECTID is
OBJECTID converted
OBJECTID to
INT_CONST 0
'.'
TYPEID Signed
OBJECTID and
OBJECTID unsigned
OBJECTID strings
OBJECTID are
OBJECTID handled
'.'
TYPEID The
OBJECTID method
OBJECTID aborts
IF
OBJECTID the
OBJECTID string
OBJECTID does
NOT
OBJECTID represent
OBJECTID an
OBJECTID integer
'.'
TYPEID Very
OBJECTID long
OBJECTID strings
OF
OBJECTID digits
OBJECTID produce
OBJECTID strange
OBJECTID answers
OBJECTID because
OF
OBJECTID arithmetic
OBJECTID overflow
'.'
'*'
')'
OBJECTID a2i
'('
OBJECTID s
':'
TYPEID String
')'
':'
TYPEID Int
'{'
IF
OBJECTID s
'.'
OBJECTID length
'('
')'
'='
INT_CONST 0
OBJECTID then
INT_CONST 0
OBJECTID else
IF
OBJECTID s
'.'
OBJECTID substr
'('
INT_CONST 0
','
INT_CONST 1
')'
'='
STR_CONST "-"
OBJECTID then
'~'
OBJECTID a2i
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
OBJECTID s
'.'
OBJECTID substr
'('
INT_CONST 1
','
OBJECTID s
'.'
OBJECTID length
'('
')'
'-'
INT_CONST 1
')'
')'
OBJECTID else
IF
OBJECTID s
'.'
OBJECTID substr
'('
INT_CONST 0
','
INT_CONST 1
')'
'='
STR_CONST "+"
OBJECTID then
OBJECTID a2i
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
OBJECTID s
'.'
OBJECTID substr
'('
INT_CONST 1
','
OBJECTID s
'.'
OBJECTID length
'('
')'
'-'
INT_CONST 1
')'
')'
OBJECTID else
OBJECTID a2i
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
OBJECTID s
')'
FI
FI
FI
'}'
';'
'('
'*'
OBJECTID a2i
LEXER BUG - UNMATCHED: _
OBJECTID aux
OBJECTID converts
OBJECTID the
OBJECTID usigned
OBJECTID portion
OF
OBJECTID the
OBJECTID string
'.'
TYPEID As
OBJECTID a
OBJECTID programming
OBJECTID example
','
OBJECTID this
OBJECTID method
OBJECTID is
OBJECTID written
OBJECTID iteratively
'.'
'*'
')'
OBJECTID a2i
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
OBJECTID s
':'
TYPEID String
')'
':'
TYPEID Int
'{'
'('
OBJECTID let
OBJECTID int
':'
TYPEID Int
ASSIGN
INT_CONST 0
IN
'{'
'('
OBJECTID let
OBJECTID j
':'
TYPEID Int
ASSIGN
OBJECTID s
'.'
OBJECTID length
'('
')'
IN
'('
OBJECTID let
OBJECTID i
':'
TYPEID Int
ASSIGN
INT_CONST 0
IN
OBJECTID while
OBJECTID i
'<'
OBJECTID j
LOOP
'{'
OBJECTID int
ASSIGN
OBJECTID int
'*'
INT_CONST 10
'+'
OBJECTID c2i
'('
OBJECTID s
'.'
OBJECTID substr
'('
OBJECTID i
','
INT_CONST 1
')'
')'
';'
OBJECTID i
ASSIGN
OBJECTID i
'+'
INT_CONST 1
';'
'}'
POOL
')'
')'
';'
OBJECTID int
';'
'}'
')'
'}'
';'
'('
'*'
OBJECTID i2a
OBJECTID converts
OBJECTID an
OBJECTID integer
OBJECTID to
OBJECTID a
OBJECTID string
'.'
TYPEID Positive
OBJECTID and
OBJECTID negative
OBJECTID numbers
OBJECTID are
OBJECTID handled
OBJECTID correctly
'.'
'*'
')'
OBJECTID i2a
'('
OBJECTID i
':'
TYPEID Int
')'
':'
TYPEID String
'{'
IF
OBJECTID i
'='
INT_CONST 0
OBJECTID then
STR_CONST "0"
OBJECTID else
IF
INT_CONST 0
'<'
OBJECTID i
OBJECTID then
OBJECTID i2a
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
OBJECTID i
')'
OBJECTID else
STR_CONST "-"
'.'
OBJECTID concat
'('
OBJECTID i2a
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
OBJECTID i
'*'
'~'
INT_CONST 1
')'
')'
FI
FI
'}'
';'
'('
'*'
OBJECTID i2a
LEXER BUG - UNMATCHED: _
OBJECTID aux
OBJECTID is
OBJECTID an
OBJECTID example
OBJECTID using
OBJECTID recursion
'.'
'*'
')'
OBJECTID i2a
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
OBJECTID i
':'
TYPEID Int
')'
':'
TYPEID String
'{'
IF
OBJECTID i
'='
INT_CONST 0
OBJECTID then
STR_CONST ""
OBJECTID else
'('
OBJECTID let
OBJECTID next
':'
TYPEID Int
ASSIGN
OBJECTID i
'/'
INT_CONST 10
IN
OBJECTID i2a
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
OBJECTID next
')'
'.'
OBJECTID concat
'('
OBJECTID i2c
'('
OBJECTID i
'-'
OBJECTID next
'*'
INT_CONST 10
')'
')'
')'
FI
'}'
';'
'}'
';'
CLASS
TYPEID Main
INHERITS
TYPEID IO
'{'
OBJECTID char
':'
TYPEID String
';'
OBJECTID avar
':'
TYPEID A
';'
OBJECTID a
LEXER BUG - UNMATCHED: _
OBJECTID var
':'
TYPEID A
';'
OBJECTID flag
':'
TYPEID Bool
ASSIGN
BOOL_CONST true
';'
OBJECTID menu
'('
')'
':'
TYPEID String
'{'
'{'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "\\n\\tTo add a number to "
')'
';'
OBJECTID print
'('
OBJECTID avar
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "...enter a:\\n"
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "\\tTo negate "
')'
';'
OBJECTID print
'('
OBJECTID avar
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "...enter b:\\n"
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "\\tTo find the difference between "
')'
';'
OBJECTID print
'('
OBJECTID avar
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "and another number...enter c:\\n"
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "\\tTo find the factorial of "
')'
';'
OBJECTID print
'('
OBJECTID avar
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "...enter d:\\n"
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "\\tTo square "
')'
';'
OBJECTID print
'('
OBJECTID avar
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "...enter e:\\n"
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "\\tTo cube "
')'
';'
OBJECTID print
'('
OBJECTID avar
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "...enter f:\\n"
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "\\tTo find out if "
')'
';'
OBJECTID print
'('
OBJECTID avar
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "is a multiple of 3...enter g:\\n"
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "\\tTo divide "
')'
';'
OBJECTID print
'('
OBJECTID avar
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "by 8...enter h:\\n"
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "\\tTo get a new number...enter j:\\n"
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "\\tTo quit...enter q:\\n\\n"
')'
';'
IN
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
')'
';'
'}'
'}'
';'
OBJECTID prompt
'('
')'
':'
TYPEID String
'{'
'{'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "\\n"
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "Please enter a number...  "
')'
';'
IN
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
')'
';'
'}'
'}'
';'
OBJECTID get
LEXER BUG - UNMATCHED: _
OBJECTID int
'('
')'
':'
TYPEID Int
'{'
'{'
'('
OBJECTID let
OBJECTID z
':'
TYPEID A2I
ASSIGN
OBJECTID new
TYPEID A2I
IN
'('
OBJECTID let
OBJECTID s
':'
TYPEID String
ASSIGN
OBJECTID prompt
'('
')'
IN
OBJECTID z
'.'
OBJECTID a2i
'('
OBJECTID s
')'
')'
')'
';'
'}'
'}'
';'
OBJECTID is
LEXER BUG - UNMATCHED: _
OBJECTID even
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID Bool
'{'
'('
OBJECTID let
OBJECTID x
':'
TYPEID Int
ASSIGN
OBJECTID num
IN
IF
OBJECTID x
'<'
INT_CONST 0
OBJECTID then
OBJECTID is
LEXER BUG - UNMATCHED: _
OBJECTID even
'('
'~'
OBJECTID x
')'
OBJECTID else
IF
INT_CONST 0
'='
OBJECTID x
OBJECTID then
BOOL_CONST true
OBJECTID else
IF
INT_CONST 1
'='
OBJECTID x
OBJECTID then
BOOL_CONST false
OBJECTID else
OBJECTID is
LEXER BUG - UNMATCHED: _
OBJECTID even
'('
OBJECTID x
'-'
INT_CONST 2
')'
FI
FI
FI
')'
'}'
';'
CLASS
LEXER BUG - UNMATCHED: _
OBJECTID type
'('
OBJECTID var
':'
TYPEID A
')'
':'
TYPEID SELF
LEXER BUG - UNMATCHED: _
TYPEID TYPE
'{'
CASE
OBJECTID var
OF
OBJECTID a
':'
TYPEID A
DARROW
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "Class type is now A\\n"
')'
';'
OBJECTID b
':'
TYPEID B
DARROW
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "Class type is now B\\n"
')'
';'
OBJECTID c
':'
TYPEID C
DARROW
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "Class type is now C\\n"
')'
';'
OBJECTID d
':'
TYPEID D
DARROW
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "Class type is now D\\n"
')'
';'
OBJECTID e
':'
TYPEID E
DARROW
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "Class type is now E\\n"
')'
';'
OBJECTID o
':'
TYPEID Object
DARROW
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "Oooops\\n"
')'
';'
OBJECTID esac
'}'
';'
OBJECTID print
'('
OBJECTID var
':'
TYPEID A
')'
':'
TYPEID SELF
LEXER BUG - UNMATCHED: _
TYPEID TYPE
'{'
'('
OBJECTID let
OBJECTID z
':'
TYPEID A2I
ASSIGN
OBJECTID new
TYPEID A2I
IN
'{'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
OBJECTID z
'.'
OBJECTID i2a
'('
OBJECTID var
'.'
OBJECTID value
'('
')'
')'
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST " "
')'
';'
'}'
')'
'}'
';'
OBJECTID main
'('
')'
':'
TYPEID Object
'{'
'{'
OBJECTID avar
ASSIGN
'('
OBJECTID new
TYPEID A
')'
';'
OBJECTID while
OBJECTID flag
LOOP
'{'
'-'
'-'
OBJECTID avar
ASSIGN
'('
OBJECTID new
TYPEID A
')'
'.'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
OBJECTID get
LEXER BUG - UNMATCHED: _
OBJECTID int
'('
')'
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "number "
')'
';'
OBJECTID print
'('
OBJECTID avar
')'
';'
IF
OBJECTID is
LEXER BUG - UNMATCHED: _
OBJECTID even
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
OBJECTID then
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "is even!\\n"
')'
OBJECTID else
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "is odd!\\n"
')'
FI
';'
'-'
'-'
OBJECTID print
'('
OBJECTID avar
')'
';'
'-'
'-'
OBJECTID prints
OBJECTID out
OBJECTID answer
CLASS
LEXER BUG - UNMATCHED: _
OBJECTID type
'('
OBJECTID avar
')'
';'
OBJECTID char
ASSIGN
OBJECTID menu
'('
')'
';'
IF
OBJECTID char
'='
STR_CONST "a"
OBJECTID then
'-'
'-'
OBJECTID add
'{'
OBJECTID a
LEXER BUG - UNMATCHED: _
OBJECTID var
ASSIGN
'('
OBJECTID new
TYPEID A
')'
'.'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
OBJECTID get
LEXER BUG - UNMATCHED: _
OBJECTID int
'('
')'
')'
';'
OBJECTID avar
ASSIGN
'('
OBJECTID new
TYPEID B
')'
'.'
OBJECTID method2
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
','
OBJECTID a
LEXER BUG - UNMATCHED: _
OBJECTID var
'.'
OBJECTID value
'('
')'
')'
';'
'}'
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "b"
OBJECTID then
'-'
'-'
OBJECTID negate
CASE
OBJECTID avar
OF
OBJECTID c
':'
TYPEID C
DARROW
OBJECTID avar
ASSIGN
OBJECTID c
'.'
OBJECTID method6
'('
OBJECTID c
'.'
OBJECTID value
'('
')'
')'
';'
OBJECTID a
':'
TYPEID A
DARROW
OBJECTID avar
ASSIGN
OBJECTID a
'.'
OBJECTID method3
'('
OBJECTID a
'.'
OBJECTID value
'('
')'
')'
';'
OBJECTID o
':'
TYPEID Object
DARROW
'{'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "Oooops\\n"
')'
';'
OBJECTID abort
'('
')'
';'
INT_CONST 0
';'
'}'
';'
OBJECTID esac
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "c"
OBJECTID then
'-'
'-'
OBJECTID diff
'{'
OBJECTID a
LEXER BUG - UNMATCHED: _
OBJECTID var
ASSIGN
'('
OBJECTID new
TYPEID A
')'
'.'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
OBJECTID get
LEXER BUG - UNMATCHED: _
OBJECTID int
'('
')'
')'
';'
OBJECTID avar
ASSIGN
'('
OBJECTID new
TYPEID D
')'
'.'
OBJECTID method4
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
','
OBJECTID a
LEXER BUG - UNMATCHED: _
OBJECTID var
'.'
OBJECTID value
'('
')'
')'
';'
'}'
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "d"
OBJECTID then
OBJECTID avar
ASSIGN
'('
OBJECTID new
TYPEID C
')'
LEXER BUG - UNMATCHED: @
TYPEID A
'.'
OBJECTID method5
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
OBJECTID else
'-'
'-'
OBJECTID factorial
IF
OBJECTID char
'='
STR_CONST "e"
OBJECTID then
OBJECTID avar
ASSIGN
'('
OBJECTID new
TYPEID C
')'
LEXER BUG - UNMATCHED: @
TYPEID B
'.'
OBJECTID method5
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
OBJECTID else
'-'
'-'
OBJECTID square
IF
OBJECTID char
'='
STR_CONST "f"
OBJECTID then
OBJECTID avar
ASSIGN
'('
OBJECTID new
TYPEID C
')'
LEXER BUG - UNMATCHED: @
TYPEID C
'.'
OBJECTID method5
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
OBJECTID else
'-'
'-'
OBJECTID cube
IF
OBJECTID char
'='
STR_CONST "g"
OBJECTID then
'-'
'-'
OBJECTID multiple
OF
INT_CONST 3
LEXER BUG - UNMATCHED: ?
IF
'('
'('
OBJECTID new
TYPEID D
')'
'.'
OBJECTID method7
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
')'
OBJECTID then
'-'
'-'
OBJECTID avar
ASSIGN
'('
OBJECTID new
TYPEID A
')'
'.'
OBJECTID method1
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
'{'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "number "
')'
';'
OBJECTID print
'('
OBJECTID avar
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "is divisible by 3.\\n"
')'
';'
'}'
OBJECTID else
'-'
'-'
OBJECTID avar
ASSIGN
'('
OBJECTID new
TYPEID A
')'
'.'
OBJECTID set
LEXER BUG - UNMATCHED: _
OBJECTID var
'('
INT_CONST 0
')'
'{'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "number "
')'
';'
OBJECTID print
'('
OBJECTID avar
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "is not divisible by 3.\\n"
')'
';'
'}'
FI
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "h"
OBJECTID then
'('
OBJECTID let
OBJECTID x
':'
TYPEID A
IN
'{'
OBJECTID x
ASSIGN
'('
OBJECTID new
TYPEID E
')'
'.'
OBJECTID method6
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
';'
'('
OBJECTID let
OBJECTID r
':'
TYPEID Int
ASSIGN
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
'-'
'('
OBJECTID x
'.'
OBJECTID value
'('
')'
'*'
INT_CONST 8
')'
')'
IN
'{'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "number "
')'
';'
OBJECTID print
'('
OBJECTID avar
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "is equal to "
')'
';'
OBJECTID print
'('
OBJECTID x
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "times 8 with a remainder of "
')'
';'
'('
OBJECTID let
OBJECTID a
':'
TYPEID A2I
ASSIGN
OBJECTID new
TYPEID A2I
IN
'{'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
OBJECTID a
'.'
OBJECTID i2a
'('
OBJECTID r
')'
')'
';'
OBJECTID out
LEXER BUG - UNMATCHED: _
OBJECTID string
'('
STR_CONST "\\n"
')'
';'
'}'
')'
';'
'-'
'-'
OBJECTID end
OBJECTID let
OBJECTID a
':'
'}'
')'
';'
'-'
'-'
OBJECTID end
OBJECTID let
OBJECTID r
':'
OBJECTID avar
ASSIGN
OBJECTID x
';'
'}'
')'
'-'
'-'
OBJECTID end
OBJECTID let
OBJECTID x
':'
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "j"
OBJECTID then
OBJECTID avar
ASSIGN
'('
OBJECTID new
TYPEID A
')'
OBJECTID else
IF
OBJECTID char
'='
STR_CONST "q"
OBJECTID then
OBJECTID flag
ASSIGN
BOOL_CONST false
OBJECTID else
OBJECTID avar
ASSIGN
'('
OBJECTID new
TYPEID A
')'
'.'
OBJECTID method1
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
'-'
'-'
OBJECTID divide
'/'
INT_CONST 8
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
';'
'}'
POOL
';'
'}'
'}'
';'
'}'
';'
